//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CINEMA_BE
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QL_RCP_Entities : DbContext
    {
        public QL_RCP_Entities()
            : base("name=QL_RCP_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<actor> actors { get; set; }
        public virtual DbSet<director> directors { get; set; }
        public virtual DbSet<genre> genres { get; set; }
        public virtual DbSet<cinema> cinemas { get; set; }
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<foods_drinks> foods_drinks { get; set; }
        public virtual DbSet<movy> movies { get; set; }
        public virtual DbSet<problem> problems { get; set; }
        public virtual DbSet<screen_rooms> screen_rooms { get; set; }
        public virtual DbSet<seat> seats { get; set; }
        public virtual DbSet<show_times> show_times { get; set; }
        public virtual DbSet<staff> staffs { get; set; }
        public virtual DbSet<transaction> transactions { get; set; }
        public virtual DbSet<transactions_foods_drinks> transactions_foods_drinks { get; set; }
        public virtual DbSet<voucher_uses> voucher_uses { get; set; }
        public virtual DbSet<voucher> vouchers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<ticket> tickets { get; set; }
        public virtual DbSet<screen_rooms_seats> screen_rooms_seats { get; set; }
    
        public virtual ObjectResult<GetMovieShowtimes_Result> GetMovieShowtimes(Nullable<int> movieId, string cityName, string cinemaName)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("movieId", movieId) :
                new ObjectParameter("movieId", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            var cinemaNameParameter = cinemaName != null ?
                new ObjectParameter("cinemaName", cinemaName) :
                new ObjectParameter("cinemaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMovieShowtimes_Result>("GetMovieShowtimes", movieIdParameter, cityNameParameter, cinemaNameParameter);
        }
    
        public virtual ObjectResult<GetMovieShowtimes1_Result> GetMovieShowtimes1(Nullable<int> movieId, string cityName, string cinemaName)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("movieId", movieId) :
                new ObjectParameter("movieId", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            var cinemaNameParameter = cinemaName != null ?
                new ObjectParameter("cinemaName", cinemaName) :
                new ObjectParameter("cinemaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMovieShowtimes1_Result>("GetMovieShowtimes1", movieIdParameter, cityNameParameter, cinemaNameParameter);
        }
    
        public virtual ObjectResult<GetMoviesByType_Result> GetMoviesByType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMoviesByType_Result>("GetMoviesByType");
        }
    
        [DbFunction("QL_RCP_Entities", "GetAvailableDates")]
        public virtual IQueryable<Nullable<System.DateTime>> GetAvailableDates(Nullable<int> movieId, Nullable<int> cinemaId)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("movieId", movieId) :
                new ObjectParameter("movieId", typeof(int));
    
            var cinemaIdParameter = cinemaId.HasValue ?
                new ObjectParameter("cinemaId", cinemaId) :
                new ObjectParameter("cinemaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<System.DateTime>>("[QL_RCP_Entities].[GetAvailableDates](@movieId, @cinemaId)", movieIdParameter, cinemaIdParameter);
        }
    
        [DbFunction("QL_RCP_Entities", "GetAvailableMovies")]
        public virtual IQueryable<GetAvailableMovies_Result> GetAvailableMovies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAvailableMovies_Result>("[QL_RCP_Entities].[GetAvailableMovies]()");
        }
    
        [DbFunction("QL_RCP_Entities", "GetAvailableShowtimes")]
        public virtual IQueryable<GetAvailableShowtimes_Result> GetAvailableShowtimes(Nullable<int> movieId, Nullable<int> cinemaId, Nullable<System.DateTime> showDate)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("movieId", movieId) :
                new ObjectParameter("movieId", typeof(int));
    
            var cinemaIdParameter = cinemaId.HasValue ?
                new ObjectParameter("cinemaId", cinemaId) :
                new ObjectParameter("cinemaId", typeof(int));
    
            var showDateParameter = showDate.HasValue ?
                new ObjectParameter("showDate", showDate) :
                new ObjectParameter("showDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAvailableShowtimes_Result>("[QL_RCP_Entities].[GetAvailableShowtimes](@movieId, @cinemaId, @showDate)", movieIdParameter, cinemaIdParameter, showDateParameter);
        }
    
        [DbFunction("QL_RCP_Entities", "GetCinemasByMovie")]
        public virtual IQueryable<GetCinemasByMovie_Result> GetCinemasByMovie(Nullable<int> movieId)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("movieId", movieId) :
                new ObjectParameter("movieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCinemasByMovie_Result>("[QL_RCP_Entities].[GetCinemasByMovie](@movieId)", movieIdParameter);
        }
    
        [DbFunction("QL_RCP_Entities", "GetCinemasByMovie1")]
        public virtual IQueryable<GetCinemasByMovie1_Result> GetCinemasByMovie1(Nullable<int> movieId)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("movieId", movieId) :
                new ObjectParameter("movieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCinemasByMovie1_Result>("[QL_RCP_Entities].[GetCinemasByMovie1](@movieId)", movieIdParameter);
        }
    
        public virtual int HoldSeatAndCreateTicket(Nullable<int> showtimeId, Nullable<int> seatId, Nullable<int> customerId)
        {
            var showtimeIdParameter = showtimeId.HasValue ?
                new ObjectParameter("ShowtimeId", showtimeId) :
                new ObjectParameter("ShowtimeId", typeof(int));
    
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HoldSeatAndCreateTicket", showtimeIdParameter, seatIdParameter, customerIdParameter);
        }
    
        public virtual int UnholdSeatAndDeleteTicket(Nullable<int> showtimeId, Nullable<int> seatId, Nullable<int> customerId)
        {
            var showtimeIdParameter = showtimeId.HasValue ?
                new ObjectParameter("ShowtimeId", showtimeId) :
                new ObjectParameter("ShowtimeId", typeof(int));
    
            var seatIdParameter = seatId.HasValue ?
                new ObjectParameter("SeatId", seatId) :
                new ObjectParameter("SeatId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnholdSeatAndDeleteTicket", showtimeIdParameter, seatIdParameter, customerIdParameter);
        }
    
        public virtual int AddFoodDrinkTransaction(Nullable<int> transactionId, Nullable<int> foodDrinkId, Nullable<int> quantity)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var foodDrinkIdParameter = foodDrinkId.HasValue ?
                new ObjectParameter("FoodDrinkId", foodDrinkId) :
                new ObjectParameter("FoodDrinkId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFoodDrinkTransaction", transactionIdParameter, foodDrinkIdParameter, quantityParameter);
        }
    
        [DbFunction("QL_RCP_Entities", "GetTransactionDetailsByCustomerId")]
        public virtual IQueryable<GetTransactionDetailsByCustomerId_Result> GetTransactionDetailsByCustomerId(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTransactionDetailsByCustomerId_Result>("[QL_RCP_Entities].[GetTransactionDetailsByCustomerId](@CustomerId)", customerIdParameter);
        }
    
        [DbFunction("QL_RCP_Entities", "GetTransactionDetailsByCustomerId1")]
        public virtual IQueryable<GetTransactionDetailsByCustomerId1_Result> GetTransactionDetailsByCustomerId1(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTransactionDetailsByCustomerId1_Result>("[QL_RCP_Entities].[GetTransactionDetailsByCustomerId1](@CustomerId)", customerIdParameter);
        }
    
        [DbFunction("QL_RCP_Entities", "GetTransactionDetailsByCustomerId2")]
        public virtual IQueryable<GetTransactionDetailsByCustomerId2_Result> GetTransactionDetailsByCustomerId2(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTransactionDetailsByCustomerId2_Result>("[QL_RCP_Entities].[GetTransactionDetailsByCustomerId2](@CustomerId)", customerIdParameter);
        }
    
        [DbFunction("QL_RCP_Entities", "GetMonthlyRevenue")]
        public virtual IQueryable<GetMonthlyRevenue_Result> GetMonthlyRevenue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMonthlyRevenue_Result>("[QL_RCP_Entities].[GetMonthlyRevenue]()");
        }
    
        [DbFunction("QL_RCP_Entities", "GetCurrentMonthRevenueAndGrowth")]
        public virtual IQueryable<GetCurrentMonthRevenueAndGrowth_Result> GetCurrentMonthRevenueAndGrowth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCurrentMonthRevenueAndGrowth_Result>("[QL_RCP_Entities].[GetCurrentMonthRevenueAndGrowth]()");
        }
    
        [DbFunction("QL_RCP_Entities", "GetCurrentMonthRevenueGrowth")]
        public virtual IQueryable<GetCurrentMonthRevenueGrowth_Result> GetCurrentMonthRevenueGrowth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCurrentMonthRevenueGrowth_Result>("[QL_RCP_Entities].[GetCurrentMonthRevenueGrowth]()");
        }
    
        [DbFunction("QL_RCP_Entities", "GetCurrentAndPreviousDayRevenue")]
        public virtual IQueryable<GetCurrentAndPreviousDayRevenue_Result> GetCurrentAndPreviousDayRevenue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCurrentAndPreviousDayRevenue_Result>("[QL_RCP_Entities].[GetCurrentAndPreviousDayRevenue]()");
        }
    
        [DbFunction("QL_RCP_Entities", "GetTop5CustomersBySpending")]
        public virtual IQueryable<GetTop5CustomersBySpending_Result> GetTop5CustomersBySpending()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTop5CustomersBySpending_Result>("[QL_RCP_Entities].[GetTop5CustomersBySpending]()");
        }
    
        [DbFunction("QL_RCP_Entities", "GetTop5Customers")]
        public virtual IQueryable<GetTop5Customers_Result> GetTop5Customers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTop5Customers_Result>("[QL_RCP_Entities].[GetTop5Customers]()");
        }
    
        public virtual ObjectResult<Get3Month_Result> Get3Month()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get3Month_Result>("Get3Month");
        }
    
        [DbFunction("QL_RCP_Entities", "GetCurrentAndPreviousDayTicketsSold")]
        public virtual IQueryable<GetCurrentAndPreviousDayTicketsSold_Result> GetCurrentAndPreviousDayTicketsSold()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCurrentAndPreviousDayTicketsSold_Result>("[QL_RCP_Entities].[GetCurrentAndPreviousDayTicketsSold]()");
        }
    
        [DbFunction("QL_RCP_Entities", "GetCurrentAndPreviousDayFoodDrinkSales")]
        public virtual IQueryable<GetCurrentAndPreviousDayFoodDrinkSales_Result> GetCurrentAndPreviousDayFoodDrinkSales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCurrentAndPreviousDayFoodDrinkSales_Result>("[QL_RCP_Entities].[GetCurrentAndPreviousDayFoodDrinkSales]()");
        }
    }
}
